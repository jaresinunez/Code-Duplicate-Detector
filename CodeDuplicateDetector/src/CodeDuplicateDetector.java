import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import projectClasses.*;

/**
 * This class contains the main method and deals with most of the GUI, panes, buttons, text areas, etc. It 
 * contains the design for the app and allows users to submit files from their own folders found on their 
 * PC. It also uses the Files class objects in order to read the user's files.
 * @author kgonz
 */
public class CodeDuplicateDetector extends javax.swing.JFrame {
    boolean buttonClicked = false; //checks to see if a certain button is clicked
    String filePath; //file path from the user's folder
    File path; //uses path to find the folder and reutrn the actual path
    Boolean isJavaFile = false; //T or F to see if the file submitted from the user is a java soruce file
    Boolean isCppFile = false; //T or F to see if the file submitted from the user is a c++ soruce file
    JFileChooser submit_file = new JFileChooser(); //allows the user to chose a file from the given file chooser class
    
    /**
     * Creates new form CodeDuplicateDetector and keeps tracks of the 
     * components of the GUI being used
     */
    public CodeDuplicateDetector() {
        initComponents();
        //TODO update use cases,  should not be any errors with choosing scan for duplication since 
        //button doesnt appear until subimitted files
        button3.setVisible(false);  
        button2.setVisible(false);  
        jTextArea1.setVisible(false); 
        jTextArea1.setEnabled(false); 
        jTextArea3.setVisible(false);
        jTextArea3.setEnabled(false); 
        CodeDuplicateDetector.this.revalidate();
        CodeDuplicateDetector.this.repaint();       
    }

    /**
     * Method bellow contains the components of the GUI tools being used.
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        button1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        button2 = new javax.swing.JButton();
        button3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        setResizable(false);

        button1.setBackground(new java.awt.Color(209, 249, 209));
        button1.setText("Select File");
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jLabel2.setOpaque(true);

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jScrollPane2.setViewportView(jTextArea2);

        button2.setBackground(new java.awt.Color(255, 235, 215));
        button2.setText("Scan to Detect Duplication");
        button2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button2ActionPerformed(evt);
            }
        });

        button3.setBackground(new java.awt.Color(217, 235, 255));
        button3.setText("Save Changes");
        button3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button3ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTextArea3.setColumns(20);
        jTextArea3.setRows(5);
        jScrollPane3.setViewportView(jTextArea3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(212, 212, 212)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(button1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(button2, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 538, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(button2, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(button1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(button3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 420, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * When button1 is clicked (action is preformed by the user), the following
     * events occur: pop-ups a window to select a file, and checks to see the 
     * source file type and responds accordingly 
     * 
     * @param evt when button1 is clicked
     */
    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        //when button is clicked
        if (evt.getSource()==button1){     
            int response = submit_file.showOpenDialog(null);
           
            //if file is submitted, checks file path and type
            if(response == JFileChooser.APPROVE_OPTION){
                filePath = submit_file.getSelectedFile().getAbsolutePath();
            
                //if c++ or java
                if(fileType(filePath).equals("java") || fileType(filePath).equals("cpp")){   
                    String fileData = getFileData(filePath);
                
                    //if file is not empty
                    if(fileData != null){
                        Files fileDataCode = new Files(fileData);

                        System.out.println("Opening source file from the path-> "+filePath);
                        System.out.println(fileData);

                       // jLabel1.setText("File submitted!");
                        jLabel2.setText("Opening " + filePath);
                        jTextArea2.setText(fileData);
                        button2.setVisible(true);
                        button3.setVisible(true);
                        
                        if(fileType(filePath).equals("java"))
                            isJavaFile = true;  // suggest method
                        else if (fileType(filePath).equals("cpp"))
                            isCppFile = true;   //suggest method
                        
                    } else {
                        jTextArea2.setText("File was not found. Try Again.");
                    }
                } else {
                    jLabel2.setText(path + " is not a correct file type.");
                }                
            }
        }
        buttonClicked = true;
    }//GEN-LAST:event_button1ActionPerformed

    /**
     * This method returns the contents of the file in a string
     * @param filePath -> the path address of the file
     * @return -> contents of file in String
     */
    private String getFileData(String filePath){
        //try catch to open and read file safely
        try {
            FileReader fr = new FileReader(filePath);
            String fileData = "";
            int c;
            while((c=fr.read()) != -1)
                fileData += (char)c;
            fr.close();
            return fileData;
        } catch (Exception ex) {
            Logger.getLogger(CodeDuplicateDetector.class.getName()).log(Level.SEVERE, null, ex);
        }
        return null;
    }
    
    /**
     * This method returns the lines in the file as an ArrayList
     * @param filePath -> path address of the file
     * @return  -> String ArrayList of lines in the file
     */
    private ArrayList<String> readFile(String filePath){
        path = new File(filePath);
               
        ArrayList<String> list = new ArrayList<String>();

        BufferedReader reader;
        try {
            reader = new BufferedReader(new FileReader(filePath));
            String line = reader.readLine();
            while (line != null) {
                    System.out.println(line);
                    // read next line
                    line = reader.readLine();
                    if (line != null) {
                        if(!line.equals("}") && !line.equals("{")){
                            if(line.contains("//")){
                                line = line.substring(0,line.indexOf("//"));
                            }
                            line = line.trim();
                            list.add(line);
                        }
                    } 
            }
            reader.close();
        } catch (IOException e) {
                e.printStackTrace();
        }

        //removes symbols that might count towards duplication from src file
        list.removeAll(Arrays.asList("", null, " ", "/**", "*/", "}", "{"));
        return list;
    }
    
    //retruns the Strings of each line of the src file in a array list
    private ArrayList lineArray(String filePathLine) throws FileNotFoundException{
        ArrayList<String> result = new ArrayList<>();

        try (Scanner s = new Scanner(new FileReader(filePathLine))) {
            while (s.hasNext()) {
                result.add(s.nextLine());
            }
            return result;
        }
    }
    
    /**
     * Whenever button 2 is clicked, this occurs: checks if the following button
     * is clicked before moving on, passes the string list of lines from src file
     * to the Files class,scans the strings for duplication in their prospected 
     * classes, returns text and results to the textAreas and makes them visible
     * 
     * @param evt when button 2 is clicked
     */
    private void button2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button2ActionPerformed

        //
        if (evt.getSource()==button2 && buttonClicked == true){

            ArrayList<String> list = readFile(filePath);

            //calls method from the Files class with the lines on Strings from src file
            Files userFile = new Files(filePath);
            String dupResults = userFile.scan(list);
            String dupTable = userFile.alternateScan(list);

            //makes visible and sets textAreas with results from the Files class methods
            jTextArea1.setVisible(true);
            jTextArea1.setText(dupResults);
            button2.setVisible(true);  
            jTextArea1.setEnabled(true);
            jTextArea3.setVisible(true);
            jTextArea3.setText(dupTable);
            jTextArea3.setEnabled(true);
            
            switch (fileType(filePath)) {
                case "java" -> {
                    //TODO below is the results of the similiarity or duplication detected (%) and which lines it occured
                    //in and will appear in the textArea on the right once the user clicks "scan" for the java files
                    //jTextArea1.setText(Dulpicate.resolve());
                    
                }
                case "cpp" -> {
                    //TODO below is the results of the similiarity or duplication detected (%) and which lines it occured
                    //in and will appear in the textArea on the right once the user clicks "scan" for the C files
                    // jTextArea1.setText(Dulpicate.resolve());
                }
                default -> {
                    jTextArea2.setText("Not a supported file type.");
                }
            }
        }  
        else{
            jTextArea2.setText("Please choose a file first! ");
        }
    }//GEN-LAST:event_button2ActionPerformed

    /**
     * Whenever button 3 is clicked, this occurs:opens the src file back up in 
     * order to allow the user to make and additional edits, changes, additions,
     * or removal from their code and will save it to the same src file.
     * 
     * @param evt when button 3 is clicked
     */
    private void button3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button3ActionPerformed

        //Below, this allows the user to save any edited changes to the main middle textArea to the same file selected
        File fileName = new File(path+ "");
      
        BufferedWriter outFile = null;
      
        try {
            outFile = new BufferedWriter(new FileWriter(fileName));
            jTextArea2.write(outFile); 
        } 
        catch (IOException ex) {
            ex.printStackTrace();
        } finally {
            if (outFile != null) {
                try {
                   outFile.close();
                } catch (IOException e) {
                   //okay to leave this exception blank here
                }
            }
        }
    }//GEN-LAST:event_button3ActionPerformed

    /**
     * Checks the file selected by the user for its type, has to be c++ or java
     * 
     * @param path src file path
     * @return file type
     */
    public String fileType(String path){
        String type = "";
        
        if(path.endsWith(".java")){
            type = "java";
        }
        else if (path.endsWith(".cpp")){
            type = "cpp";
        }
        else{
            System.out.println("Error! Please submit a java or cpp file! ");
        }
        return type;
    }
    
    /**
     * Displays the GUI form and runs the app
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CodeDuplicateDetector().setVisible(true);
            }
        });
    }

    /*
    button1 -> Submit Files Button
    button2 -> Scan Button
    button3 -> Save Changes Button
    jLabel1 -> 
    jLabel2 -> Path Box
    jScrollPane1 -> Final Code Box
    jScrollPane2 -> Preview Box
    jTextArea1 ->
    jTextArea2 ->
    */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button1;
    private javax.swing.JButton button2;
    private javax.swing.JButton button3;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    // End of variables declaration//GEN-END:variables
}
